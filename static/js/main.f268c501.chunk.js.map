{"version":3,"sources":["component/SearchBox.js","component/Card.js","component/CardList.js","component/Scroll.js","component/ErrorBoundry.js","constants.js","container/App.js","actions.js","reducers.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","id","name","email","style","margin","alt","src","CardList","robots","StrictMode","map","user","index","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","App","console","log","fetch","then","json","jsonRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","connect","dispatch","event","text","target","value","payload","initailState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f268c501.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield , searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\" \r\n        type=\"search\" \r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div style={{ margin: '7px'}} className=\"bg-light-green dib br3 pa3 na2 grow\">\r\n            \r\n            <img alt=\"robots\" src={`https://robohash.org/${id}200x20`}/>\r\n            <h3>{name}</h3>\r\n            <h3>{email}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\n    /*if (true) {\r\n        throw new Error('Noooo');\r\n    }*/\r\n    return (\r\n        <React.StrictMode>\r\n        {\r\n            robots.map((user, index) => {\r\n            return (\r\n                <Card \r\n                key={index} \r\n                id={robots[index].id} \r\n                name={robots[index].name} \r\n                email={robots[index].email}/>);\r\n            })\r\n        }\r\n      </React.StrictMode>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    \r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '3px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n           return <h1>Oooops. Thats not good.</h1>; \r\n        }\r\n       return this.props.children;       \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'","import React , { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n//import { robots } from './robots.js';\r\nimport SearchBox from '../component/SearchBox.js';\r\nimport CardList from '../component/CardList.js';\r\nimport Scroll from '../component/Scroll.js';\r\nimport ErrorBoundry from '../component/ErrorBoundry.js';\r\nimport './App.css';\r\nimport { setSearchField } from '../actions.js'\r\n\r\nconst mapStateToProps = state => {\r\n        return {\r\n            searchfield : state.searchfield\r\n        }\r\n    }\r\n\r\n    const mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            onSearchChange : (event) => dispatch(setSearchField(event.target.value))\r\n        }\r\n    }\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : []\r\n        }\r\n        console.log(\"In constructor()\");\r\n        console.log(\"In constructor() new after push\");\r\n    }\r\n\r\n\r\n    \r\n\r\n    // onSearchChange = (event) => {\r\n    //     //console.log(event.target.value);\r\n    //     this.setState({searchfield: event.target.value})\r\n    // }\r\n\r\n    componentDidMount(){\r\n        // console.log(\"Store props : \"+this.props);\r\n        // console.log(\"Store props searchfield : \"+this.props.searchfield);\r\n        //console.log(\"Store props searchfield : \"+this.props.searchfield.searchfield);\r\n        //console.log(\"Store props store state : \"+this.props.store.getState());\r\n        // for(var property in this.props) {\r\n        //     console.log(\"Property :  \"+property + \"=\" + this.props[property]);\r\n        // }\r\n\r\n        // for(var property in this.props.searchfield) {\r\n        //     console.log(\"Property inside searchfield :  \"+property + \"=\" + this.props.searchfield[property]);\r\n        // }\r\n         fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(robots => robots.json())\r\n         .then(jsonRobots => this.setState({robots: jsonRobots}));\r\n         //.then(jsonRobots => []);\r\n         console.log(\"In componentDidMount()\");\r\n    }\r\n\r\n    render(){\r\n        const { robots } = this.state;\r\n        const { searchfield,  onSearchChange} = this.props;\r\n        // console.log(\"In render()\");\r\n        // console.log(\"searchField with capital F : \"+searchfield);\r\n        // for(var property in searchfield) {\r\n            \r\n        //     console.log(\"Property inside searchField :  \"+property + \"=\" + searchfield[property]);\r\n        // }\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name?.toLowerCase().includes(searchfield.toLowerCase());//\r\n        });\r\n       return !robots.length?\r\n             <h1>Loading</h1>\r\n        :\r\n             (\r\n                <div className=\"tc\">\r\n                    <h1>Robofriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )         \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})","import {CHANGE_SEARCH_FIELD} from './constants.js'\r\n\r\nconst initailState = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initailState,action={}) => {\r\n    console.log(\"action type : \"+action.type);\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchfield: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App.js';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { searchRobots } from './reducers'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store = {store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}